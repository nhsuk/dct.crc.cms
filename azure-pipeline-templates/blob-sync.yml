pool:
  vmImage: "ubuntu-latest"

trigger: none
pr: none

parameters:
  - name: dryrun
    displayName: Dry Run
    type: boolean
    default: false
  - name: review
    displayName: Copy to Review
    type: boolean
    default: false
  - name: integration
    displayName: Copy to Integration
    type: boolean
    default: false
  - name: staging
    displayName: Copy to Staging
    type: boolean
    default: false

stages:
  - stage: production
    displayName: Get production blobs
    jobs:
      - job: Production
        steps:
          - checkout: none
          - task: AzureKeyVault@2
            displayName:
            inputs:
              azureSubscription: dct-production-vault-uks-dct.campaign-resource-centre-v3
              KeyVaultName: dct-crc-v3-vlt-prod-uks
              SecretsFilter: storageAccountKey
              RunAsPreJob: false
          - task: AzureCLI@2
            name: QueryProd
            inputs:
              azureSubscription: campaigns-apps-rg-dev-uks.campaign-resource-centre-v3
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob list \
                  --account-key $ACCOUNT_KEY \
                  --account-name $ACCOUNT \
                  --container-name $CONTAINER \
                  --num-results 50000 \
                  --only-show-errors \
                  --query '[].name' \
                  --output tsv \
                > production.log  2>&1
            env:
              ACCOUNT_KEY: $(storageAccountKey)
              ACCOUNT: campaignscrcv3produks
              CONTAINER: campaign-resource-centre-v3-production
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: ./production.log
              artifactName: prod_blobs

  - stage: staging
    dependsOn: production
    condition: ${{ parameters.staging }}
    displayName: Update staging blobs
    jobs:
      - job: Staging
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: prod_blobs
              targetPath: ./production.log
          - task: AzureKeyVault@2
            displayName:
            inputs:
              azureSubscription: dct-production-vault-uks-dct.campaign-resource-centre-v3
              KeyVaultName: dct-crc-v3-vlt-prod-uks
              SecretsFilter: storageAccountKey
              RunAsPreJob: false
          - task: AzureCLI@2
            name: QueryStaging
            inputs:
              azureSubscription: campaigns-apps-rg-stag
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                ACCOUNT_KEY=$(az storage account keys list \
                  --account-name ${ACCOUNT} \
                  --query "[0].value" \
                  --output tsv)
                az storage blob list \
                  --account-key $ACCOUNT_KEY \
                  --account-name $ACCOUNT \
                  --container-name $CONTAINER \
                  --num-results 50000 \
                  --only-show-errors \
                  --query '[].name' \
                  --output tsv \
                > staging.log  2>&1
                comm -23 production.log staging.log > production_to_staging.log
                if [ -z "$DRY_RUN" ]; then
                  echo "##vso[task.logissue type=warning;]Running in dryrun mode"
                  echo "##vso[task.complete result=SucceededWithIssues;]"
                  exit
                fi
                while read blob; do
                  az storage blob copy start \
                    --source-account-name $PROD_ACCOUNT \
                    --source-account-key $PROD_ACCOUNT_KEY \
                    --source-container $PROD_CONTAINER \
                    --source-blob $blob \
                    --account-name $ACCOUNT \
                    --account-key $ACCOUNT_KEY \
                    --destination-container $CONTAINER \
                    --destination-blob $blob \
                    --only-show-errors
                done <production_to_staging.log
            env:
              ACCOUNT: campaignsstrgstaguks
              CONTAINER: campaign-resource-centre-v3-staging
              PROD_ACCOUNT_KEY: ${storageAccountKey}
              PROD_ACCOUNT: campaignscrcv3produks
              PROD_CONTAINER: campaign-resource-centre-v3-production
              ${{ if eq(parameters.dryRun, true) }}:
                DRY_RUN: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: ./staging.log
              artifactName: staging_blobs
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: ./production_to_staging.log
              artifactName: production_to_staging_blobs
