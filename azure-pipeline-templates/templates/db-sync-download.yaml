steps:
- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: ${{parameters.VaultId}}'
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    KeyVaultName: ${{parameters.VaultId}}
    SecretsFilter: DBPass, DBName, DBHost, DBUser

- bash: |
    date=`date "+%d-%m-%Y_%H:%M:%S"`;
    echo $date
    echo "##vso[task.setvariable variable=Datestamp;isOutput=True]$date"
  name: 'currentDatestamp'

- task: AzureCLI@2
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -x
      set -e

      docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      postgres:11 \
      pg_dump -Fc "$(DBName)" > db-dump-$(currentDatestamp.Datestamp).dump
  name: 'CreateDBCopy'
  displayName: 'Create DB Copy'

- task: AzureCLI@2
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -x
      set -e

      # Save a copy to azure blob storage
      az storage blob upload \
        --account-name ${{parameters.StorageAccountNameDbDump}} \
        --account-key ${{parameters.BlobStorageKeyDbDump}} \
        --container-name ${{parameters.BlobStorageContainerNameDbDump}} \
        --file db-dump-$(currentDatestamp.Datestamp).dump \
        --name db-dump-$(currentDatestamp.Datestamp).dump

      # Rename the data dump back to db.dump
      mv db-dump-$(currentDatestamp.Datestamp).dump prod-db-dump.dump
  name: 'BlobStorageBackup'
  displayName: 'Backup to Blob Storage'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/prod-db-dump.dump
    artifactName: 'prod-db.dump'
