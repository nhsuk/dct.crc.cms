steps:
- script: |
    mkdir psql_commands_scripts
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/psql_commands_scripts/:/psql_commands_scripts/ \
      postgres:16 \
      psql -d "$(DBName)" \
      -c "\copy (SELECT 'ALTER TABLE '||constrained_table||' DROP CONSTRAINT '||constraint_name||';'
        FROM (
            SELECT
                relname AS constrained_table,
                conname AS constraint_name
            FROM pg_constraint
            INNER JOIN pg_class ON conrelid=pg_class.oid
            WHERE contype='f'
                AND confrelid = 'users_user'::regclass)
        AS drop_constraints)
        to '/psql_commands_scripts/drop_user_constraints.csv' csv;"
  displayName: 'Make drop user constraints script'

- script: |
    mkdir psql_commands_scripts
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/psql_commands_scripts/:/psql_commands_scripts/ \
      postgres:16 \
      psql -d "$(DBName)" \
      -c "\copy (SELECT 'ALTER TABLE '||constrained_table||' ADD CONSTRAINT '||constraint_name||' FOREIGN KEY ('||fk_column||') REFERENCES users_user('||ref_column||') '||on_delete||' '||def||';'
        FROM (
            SELECT
                relname AS constrained_table,
                conname AS constraint_name,
                (SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name=relname
                        AND ordinal_position=conkey[1]) AS fk_column,
                (SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name=relname
                        AND ordinal_position=confkey[1]) AS ref_column,
                (SELECT
                    CASE WHEN is_nullable = 'NO' THEN 'ON DELETE CASCADE'
                    ELSE 'ON DELETE SET NULL'
                    END
                    FROM information_schema.columns
                    WHERE table_name=relname
                        AND ordinal_position=conkey[1]) AS on_delete,
                CASE WHEN condeferrable AND condeferred THEN 'DEFERRABLE INITIALLY DEFERRED'
                    WHEN condeferrable AND NOT condeferred THEN 'DEFERRABLE INITIALLY IMMEDIATE'
                    ELSE 'NOT DEFERRABLE'
                    END AS def
            FROM pg_constraint
            INNER JOIN pg_class ON conrelid=pg_class.oid
            WHERE contype='f'
                AND confrelid = 'users_user'::regclass)
        AS add_constraints)
        to '/psql_commands_scripts/add_modified_user_constraints.csv' csv;"
  displayName: 'Make add modified constraints script'

- script: |
    mkdir psql_commands_scripts
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/psql_commands_scripts/:/psql_commands_scripts/ \
      postgres:16 \
      psql -d "$(DBName)" \
      -c "\copy (SELECT 'ALTER TABLE '||constrained_table||' ADD CONSTRAINT '||constraint_name||' FOREIGN KEY ('||fk_column||') REFERENCES users_user('||ref_column||') '||def||';'
        FROM (
            SELECT
                relname AS constrained_table,
                conname AS constraint_name,
                (SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name=relname
                        AND ordinal_position=conkey[1]) AS fk_column,
                (SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name=relname
                        AND ordinal_position=confkey[1]) AS ref_column,
                CASE WHEN condeferrable AND condeferred THEN 'DEFERRABLE INITIALLY DEFERRED'
                    WHEN condeferrable AND NOT condeferred THEN 'DEFERRABLE INITIALLY IMMEDIATE'
                    ELSE 'NOT DEFERRABLE'
                    END AS def
            FROM pg_constraint
            INNER JOIN pg_class ON conrelid=pg_class.oid
            WHERE contype='f'
                AND confrelid = 'users_user'::regclass)
        AS add_constraints)
        to '/psql_commands_scripts/add_original_user_constraints.csv' csv;"
  displayName: 'Make add original constraints script'

- script: |
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/psql_commands_scripts/:/psql_commands_scripts/ \
      postgres:16 \
      psql -d "$(DBName)" -f "/psql_commands_scripts/drop_user_constraints.csv"
  displayName: 'Drop user based constraints'

- script: |
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/psql_commands_scripts/:/psql_commands_scripts/ \
      postgres:16 \
      psql -d "$(DBName)" -f "/psql_commands_scripts/add_modified_user_constraints.csv"
  displayName: 'Add modified user based constraints'

- script: |
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(postgresqlAdminPassword)" \
      -e PGUSER="$(postgresqlAdminUser)" \
      postgres:16 \
      psql -d "$(DBName)" -c "DELETE FROM users_user"
  displayName: 'Delete prod users'

- script: |
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/psql_commands_scripts/:/psql_commands_scripts/ \
      postgres:16 \
      psql -d "$(DBName)" -f "/psql_commands_scripts/drop_user_constraints.csv"
  displayName: Drop user based constraints again

- script: |
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/${{parameters.dumpPrefix}}-db-dump.dump:/${{parameters.dumpPrefix}}-db.dump \
      postgres:16 \
      pg_restore --no-acl --no-owner --data-only -d "$(DBName)" -t "users_user" -t "otp_totp_totpdevice" -t "users_user_groups" -t "users_user_user_permissions" -t "wagtailusers_userprofile" ${{parameters.dumpPrefix}}-db.dump
  displayName: Restore ${{parameters.dumpPrefix}} users to target database

- script: |
    set -e
    docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      -v $(pwd)/psql_commands_scripts/:/psql_commands_scripts/ \
      postgres:16 \
      psql -d "$(DBName)" -f "/psql_commands_scripts/add_original_user_constraints.csv"
  displayName: Re-add original user based constraints
