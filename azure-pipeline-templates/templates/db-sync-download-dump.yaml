steps:
- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: ${{parameters.VaultId}}'
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    KeyVaultName: ${{parameters.VaultId}}
    SecretsFilter: DBPass, DBName, DBHost, DBUser

- ${{ if eq(parameters.usersOnly, true) }}
  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{parameters.azureSubscription}}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -x
        set -e
        docker run \
        -e PGHOST="$(DBHost)" \
        -e PGPASSWORD="$(DBPass)" \
        -e PGUSER="$(DBUser)" \
        postgres:11 \
        pg_dump -Fc "$(DBName)" -t "users_user" -t "otp_totp_totpdevice" -t "users_user_groups" -t "users_user_user_permissions" -t "wagtailusers_userprofile" > ${{parameters.artifactPrefix}}-db-dump.dump
    name: 'CreateUsersCopy'
    displayName: 'Dump ${{parameters.artifactPrefix}} users'

- ${{ else }}
  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{parameters.azureSubscription}}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -x
        set -e
        docker run \
        -e PGHOST="$(DBHost)" \
        -e PGPASSWORD="$(DBPass)" \
        -e PGUSER="$(DBUser)" \
        postgres:11 \
        pg_dump -Fc "$(DBName)" > ${{parameters.artifactPrefix}}-db-dump.dump
    name: 'CreateDBCopy'
    displayName: 'Dump ${{parameters.artifactPrefix}} DB'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/${{parameters.artifactPrefix}}-db-dump.dump
    artifactName: '${{parameters.artifactPrefix}}-db.dump'