steps:
- task: AzureCLI@2
  condition: ${{ eq(parameters.usersOnly, True) }}
  inputs:
    azureSubscription: ${{parameters.azureStorageSubscription}}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -x
      set -e
      docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      postgres:11 \
      pg_dump -Fc "$(DBName)" -t "users_user" -t "otp_totp_totpdevice" -t "users_user_groups" -t "users_user_user_permissions" -t "wagtailusers_userprofile" > ${{parameters.dumpPrefix}}-db-dump.dump
  name: 'Create_${{parameters.dumpPrefix}}_Copy'
  displayName: 'Dump ${{parameters.dumpPrefix}} (Users only)'

- task: AzureCLI@2
  condition: ${{ ne(parameters.usersOnly, True) }}
  inputs:
    azureSubscription: ${{parameters.azureStorageSubscription}}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -x
      set -e
      docker run \
      -e PGHOST="$(DBHost)" \
      -e PGPASSWORD="$(DBPass)" \
      -e PGUSER="$(DBUser)" \
      postgres:11 \
      pg_dump -Fc "$(DBName)" > ${{parameters.dumpPrefix}}-db-dump.dump
  name: 'Create_${{parameters.dumpPrefix}}_DBCopy'
  displayName: 'Dump ${{parameters.dumpPrefix}} (Full DB)'

- task: PublishPipelineArtifact@1
  condition: ${{ eq(parameters.publishDump, True) }}
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/${{parameters.dumpPrefix}}-db-dump.dump
    artifactName: '${{parameters.dumpPrefix}}-db.dump'