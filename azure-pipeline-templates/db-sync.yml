pool:
  vmImage: "ubuntu-latest"

trigger: none

# daily midnight backup midnight - this will not run any of the syncing jobs, only the backup 
schedules:
- cron: '0 0 * * *'
  displayName: Daily midnight build
  branches:
    include: 
    - main

parameters:
  - name: backupProdToBlobStore
    type: boolean
    default: true
  - name: syncToReview
    type: boolean
    default: false
  - name: syncToIntegration
    type: boolean
    default: false
  - name: syncToStaging
    type: boolean
    default: false

resources:
  - repo: self

stages:
  - stage: CopyFromProdDB
    displayName: "Copy Production Database"
    jobs:
      - job: ProdDBCopy
        steps:
          - template: templates/db-sync-download-dump.yaml
            parameters:
              azureVaultSubscription: "dct-production-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "nhsuk-dct-rg-prod"
              VaultId: "dct-crc-v3-vlt-prod-uks"
              artifactPrefix: "prod"

  - stage: UploadProdDumpToBlob
    displayName: "Backup Production Database"
    dependsOn:
      - CopyFromProdDB
    condition: and(succeeded(), eq('${{ parameters.backupProdToBlobStore }}', 'true'))
    jobs:
      - job: DumpUpload
        steps:
          - template: templates/db-sync-upload-blob.yaml
            parameters:
              azureVaultSubscription: "dct-production-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "nhsuk-dct-rg-prod"
              VaultId: "dct-crc-v3-vlt-prod-uks"
              StorageAccountNameDbDump: $(StorageAccountNameDbDump)
              BlobStorageKeyDbDump: $(BlobStorageKeyDbDump)
              BlobStorageContainerNameDbDump: $(BlobStorageContainerNameDbDump)
              artifactPrefix: "prod"

  - stage: GenerateScripts
    displayName: "Generate Scripts"
    dependsOn: []
    condition: or(eq('${{ parameters.syncToReview }}', 'true'), eq('${{ parameters.syncToIntegration }}', 'true'), eq('${{ parameters.syncToStaging }}', 'true'))
    jobs:
      - job: GenerateScripts
        steps:
          - template: templates/db-sync-generate-scripts.yaml
            parameters:
              azureVaultSubscription: "dct-production-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "nhsuk-dct-rg-prod"
              VaultId: "dct-crc-v3-vlt-prod-uks"

  - stage: CopyToReviewDB
    displayName: "Copy to Review Database"
    dependsOn:
      - CopyFromProdDB
      - GenerateScripts
    condition: and(succeeded(), eq('${{ parameters.syncToReview }}', true))
    jobs:
      - job: ReviewPaste
        steps:
          - template: templates/db-sync-env-sync.yaml
            parameters:
              azureVaultSubscription: "dct-development-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "nhsuk-dct-rg-dev-uks.campaign-resource-centre-v3"
              VaultId: "dct-crc-v3-vlt-rev-uks"
              Server: campaigns-cms-psql-dev-uks
              ResourceGroup: nhsuk-dct-rg-dev-uks
              environment: "review"

  - stage: CopyToIntegrationDB
    displayName: "Copy to Integration Database"
    dependsOn:
      - CopyFromProdDB
      - GenerateScripts
    condition: and(succeeded(), eq('${{ parameters.syncToIntegration }}', true))
    jobs:
      - job: IntegrationPaste
        steps:
          - template: templates/db-sync-env-sync.yaml
            parameters:
              azureVaultSubscription: "dct-development-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "nhsuk-dct-rg-dev-uks.campaign-resource-centre-v3"
              VaultId: "dct-crc-v3-vlt-int-uks"
              Server: campaigns-cms-psql-dev-uks
              ResourceGroup: nhsuk-dct-rg-dev-uks
              environment: "integration"

  - stage: CopyToStagingDB 
    displayName: "Copy to Staging Database"
    dependsOn:
      - CopyFromProdDB
      - GenerateScripts
    condition: and(succeeded(), eq('${{ parameters.syncToStaging }}', true))
    jobs:
      - job: StagingPaste
        steps:
          - template: templates/db-sync-env-sync.yaml
            parameters:
              azureVaultSubscription: "dct-staging-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "dct-cms-postgres-rg-stag"
              VaultId: "dct-crc-v3-vlt-stag-uks"
              Server: campaigns-cms-psql-stag-uks
              ResourceGroup: dct-cms-postgres-rg-stag-uksouth
              environment: "staging"
