pool:
  vmImage: "ubuntu-latest"

trigger: none

parameters:
  - name: deployToProd
    type: boolean
    default: false
  - name: deployToReview
    type: boolean
    default: false
  - name: deployToIntegration
    type: boolean
    default: false
  - name: deployToStaging
    type: boolean
    default: false

resources:
  - repo: self

stages:
  - stage: CopyFromProdDB
    displayName: "Copy from Production Database"
    condition: eq('${{ parameters.deployToProd }}', 'false')
    jobs:
      - job: DBCopy
        steps:
          - template: templates/db-sync-download.yaml
            parameters:
              azureSubscription: "dct-production-vault-uks-dct.campaign-resource-centre-v3"
              VaultId: "dct-crc-v3-vlt-prod-uks"
              StorageAccountNameDbDump: $(StorageAccountNameDbDump)
              BlobStorageKeyDbDump: $(BlobStorageKeyDbDump)
              BlobStorageContainerNameDbDump: $(BlobStorageContainerNameDbDump)

  # PROD DOWNLOAD THE DB DUMP (STAG UKS)
  - stage: DownloadProdBackUp
    displayName: "Download Production Database Backup"
    condition: eq('${{ parameters.deployToProd }}', true)
    jobs:
      - job: DbDownload
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'dct-production-vault-uks-dct.campaign-resource-centre-v3'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                export STORE_NAME="digitalcampaignsstorage"
                export CONTAINER_NAME="crc-v3-backups"
                export FOLDER="db"

                NOW=`date +"%Y-%m-%dT%H:%M:00Z"` \
                EXPIRY=`date -d "$NOW + 1 day" +"%Y-%m-%dT%H:%M:00Z"` \
                && export SAS_TOKEN=$( az storage container generate-sas \
                    --account-name $STORE_NAME \
                    --name $CONTAINER_NAME \
                    --start $NOW \
                    --expiry $EXPIRY \
                    --permissions acdlrw \
                    --output tsv )

                $(Agent.ToolsDirectory)/azcopy/azcopy copy \
                    "https://${STORE_NAME}.blob.core.windows.net/${CONTAINER_NAME}/$(DataDumpFile)?${SAS_TOKEN}" \
                    $(Build.SourcesDirectory)/db-dump.dump --recursive

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/db-dump.dump"
              ArtifactName: "db.dump"
              publishLocation: 'Container'

  - stage: CopyToReviewDB
    displayName: "Copy to Review Database"
    dependsOn:
      - CopyFromProdDB
    condition: and(succeeded(), eq('${{ parameters.deployToReview }}', true), eg('${{ parameters.deployToProd }}', 'false'))
    jobs:
      - job: DBPaste
        steps:
          - template: templates/db-sync-upload.yaml
            parameters:
              azureVaultSubscription: "dct-development-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "nhsuk-dct-rg-dev-uks.campaign-resource-centre-v3"
              VaultId: "dct-crc-v3-vlt-rev-uks"
              DBName: crcv3review
              Server: campaigns-cms-psql-dev-uks
              ResourceGroup: nhsuk-dct-rg-dev-uks

  - stage: CopyToIntegrationDB
    displayName: "Copy to Integration Database"
    dependsOn:
      - CopyFromProdDB
    condition: and(succeeded(), eq('${{ parameters.deployToIntegration }}', true), eg('${{ parameters.deployToProd }}', 'false'))
    jobs:
      - job: DBPaste
        steps:
          - template: templates/db-sync-upload.yaml
            parameters:
              azureVaultSubscription: "dct-development-vault-uks-dct.campaign-resource-centre-v3"
              azureStorageSubscription: "nhsuk-dct-rg-dev-uks.campaign-resource-centre-v3"
              VaultId: "dct-crc-v3-vlt-int-uks"
              DBName: crcv3int
              Server: campaigns-cms-psql-dev-uks
              ResourceGroup: nhsuk-dct-rg-dev-uks

#  - stage: CopyToStagingDB
#    displayName: "Copy to Staging Database"
#    dependsOn:
#      - CopyFromProdDB
#    condition: and(succeeded(), eq('${{ parameters.deployToStaging }}', true), eg('${{ parameters.deployToProd }}', 'false'))
#    jobs:
#      - job: DBPaste
#        steps:
#          - template: templates/db-sync-upload.yaml
#            parameters:
#              azureVaultSubscription: "dct-staging-vault-uks-dct.campaign-resource-centre-v3"
#              azureStorageSubscription: "dct-cms-postgres-rg-stag-uksouth.campaign-resource-centre-v3"
#              VaultId: "dct-crc-v3-vlt-stag-uks"
#              DBName: crcv3stag
#              Server: campaigns-cms-psql-stag-uks
#              ResourceGroup: dct-cms-postgres-rg-stag-uksouth

#
#  # PROD UKS COPY TO DB
#  - stage: CopyToProdUkSouthDB
#    displayName: "Copy to Prod UKS Database"
#    dependsOn:
#      - DownloadProdBackUp
#    condition: and(in(dependencies.DownloadProdBackUp.result, 'Succeeded'), eq('${{ parameters.deployToProd }}', 'true'))
#    jobs:
#      - deployment: Deployment
#        environment: "production"
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - template: templates/db-sync-upload.yaml
#                  parameters:
#                    azureSubscription: "dct-production-vault-uks-dct.campaign-resource-centre-v3" 
#                    VaultId: "dct-crc-v3-vlt-prod-uks"
#                    DBName: $(ProdDbName)
#                    Server: campaigns-cms-psql-prod-uks # assumed
#                    ResourceGroup: nhsuk-dct-rg-prod-uks
#
#  # PROD UKW COPY TO DB
#  - stage: CopyToProdUkWestDB
#    displayName: "Copy to Prod UKW Database"
#    dependsOn:
#      - DownloadProdBackUp
#    condition: and(in(dependencies.DownloadProdBackUp.result, 'Succeeded'), eq('${{ parameters.deployToProd }}', 'true'))
#    jobs:
#      - deployment: Deployment
#        environment: "production"
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - template: templates/db-sync-upload.yaml
#                  parameters:
#                    azureSubscription: "dct-dr-vault-ukw-dct.campaign-resource-centre-v3" 
#                    VaultId: "dct-crc-v3-vlt-dr-ukw"
#                    DBName: $(ProdDbName)
#                    Server: campaigns-cms-psql-prod-ukw # assumed
#                    ResourceGroup: nhsuk-dct-rg-prod-uks # correct based on above (uks/ukw mix)
