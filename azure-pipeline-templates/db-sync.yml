pool:
  vmImage: ubuntu-latest

trigger: none

# daily midnight backup midnight - this will not run any of the syncing jobs, only the backup
schedules:
- cron: '0 0 * * *'
  displayName: Daily midnight build
  branches:
    include:
    - main

parameters:
  - name: backupProduction
    type: boolean
    default: true
    displayName: Backup Production DB
  - name: syncToReview
    type: boolean
    default: false
    displayName: Sync To Review Env
  - name: syncToIntegration
    type: boolean
    default: false
    displayName: Sync To Integration Env
  - name: syncToStaging
    type: boolean
    default: false
    displayName: Sync To Staging Env

resources:
  - repo: self

stages:
  - stage: CopyFromProdDB
    displayName: Copy Production Database
    jobs:
      - job: ProdDBCopy
        steps:
          - task: AzureKeyVault@1
            displayName: 'Azure Key Vault: dct-crc-v3-vlt-prod-uks'
            inputs:
              azureSubscription: dct-production-vault-uks-dct.campaign-resource-centre-v3
              KeyVaultName: dct-crc-v3-vlt-prod-uks
              SecretsFilter: DBPass, DBName, DBHost, DBUser
          - template: templates/db-sync-download-dump.yaml
            parameters:
              azureStorageSubscription: nhsuk-dct-rg-prod
              dumpPrefix: prod
              publishDump: true

  - stage: UploadProdDumpToBlob
    displayName: Backup Production Database
    dependsOn:
      - CopyFromProdDB
    condition: and(succeeded(), eq('${{ parameters.backupProduction }}', 'true'))
    jobs:
      - job: DumpUpload
        steps:
          - template: templates/db-sync-upload-blob.yaml
            parameters:
              azureVaultSubscription: dct-production-vault-uks-dct.campaign-resource-centre-v3
              azureStorageSubscription: nhsuk-dct-rg-prod
              VaultId: dct-crc-v3-vlt-prod-uks
              StorageAccountNameDbDump: $(StorageAccountNameDbDump)
              BlobStorageKeyDbDump: $(BlobStorageKeyDbDump)
              BlobStorageContainerNameDbDump: $(BlobStorageContainerNameDbDump)
              useArtifact: true
              dumpPrefix: prod

  - stage: CopyToReviewDB
    displayName: Copy to Review Database
    dependsOn:
      - CopyFromProdDB
    condition: and(succeeded(), eq('${{ parameters.syncToReview }}', true))
    jobs:
      - job: ReviewPaste
        steps:
          - template: templates/db-sync-env-sync.yaml
            parameters:
              azureVaultSubscription: dct-development-vault-uks-dct.campaign-resource-centre-v3
              azureStorageSubscription: nhsuk-dct-rg-dev-uks.campaign-resource-centre-v3
              VaultId: dct-crc-v3-vlt-rev-uks
              environment: review
              env: dev

  - stage: CopyToIntegrationDB
    displayName: Copy to Integration Database
    dependsOn:
      - CopyFromProdDB
    condition: and(succeeded(), eq('${{ parameters.syncToIntegration }}', true))
    jobs:
      - job: IntegrationPaste
        steps:
          - template: templates/db-sync-env-sync.yaml
            parameters:
              azureVaultSubscription: dct-development-vault-uks-dct.campaign-resource-centre-v3
              azureStorageSubscription: nhsuk-dct-rg-dev-uks.campaign-resource-centre-v3
              VaultId: dct-crc-v3-vlt-int-uks
              environment: integration
              env: int

  - stage: CopyToStagingDB
    displayName: Copy to Staging Database
    dependsOn:
      - CopyFromProdDB
    condition: and(succeeded(), eq('${{ parameters.syncToStaging }}', true))
    jobs:
      - deployment: approval
        environment: staging
      - job: StagingPaste
        steps:
          - template: templates/db-sync-env-sync.yaml
            parameters:
              azureVaultSubscription: dct-staging-vault-uks-dct.campaign-resource-centre-v3
              azureStorageSubscription: dct-cms-postgres-rg-stag
              VaultId: dct-crc-v3-vlt-stag-uks
              environment: staging
              env: stag
