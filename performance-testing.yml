# JMX and Data CSV files should be stored within PerformanceTests folder in your project's root directory
trigger: none

pool:
  name: "Agents Pool AKS"

parameters:
  - name: Hostname
    displayName: "Application domain URL (without http/https and www. in the url)"
    type: string
    default: " "
  - name: NumberOfUsers
    displayName: "Total number of users/load to test against"
    type: number
    default: 0
  - name: Duration
    displayName: "Duration time to run the test for (in seconds)"
    type: number
    default: 0
  - name: RampUp
    displayName: "Test load ramp up time (in seconds)"
    type: number
    default: 0
  - name: StartUpDelayedTime
    displayName: "Delayed test start time (in seconds)"
    type: number
    default: 0
  - name: JMeterJmxFile
    displayName: "JMeter JMX File (With .jmx extension)"
    type: string
    default: "sample.jmx"
  - name: SeparateWorkerCsvFiles
    displayName: "SeparateWorkerCsvFiles (Set to true if using separate csv files for worker pods)"
    type: boolean
    default: false
  - name: JMeterCsvFile
    displayName: "Csv File name as defined in your JMX script (With .csv extension), leave empty if not used"
    type: string
    default: " "
  - name: JMeterWorkers
    displayName: "Total number of worker pods to use (for low users, use low number)"
    type: number
    default: 1
  - name: KubernetesServiceEndpoint
    displayName: "KubernetesServiceEndpoint (Do not change unless configured manually)"
    type: string
    default: "helm-nhsuk-jmeter-aks-dev-uksouth-$(System.TeamProject)"

jobs:
- job: JMeterTest
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 0
  steps:
  - script: |
      if [ -z ${{ parameters.JMeterJmxFile }} ] || [ -z ${{ parameters.JMeterWorkers }} ];
      then
        echo "##vso[task.logissue type=error]Test script file was not found in PATH or no JMeterWorkers value found!"
        echo "##vso[task.logissue type=error]Kindly check and input the correct file path and JMeterWorkers value."
        exit 1
      fi
      
      isCsvFilePresent="False"
      if [[ "${{ parameters.JMeterCsvFile }}" = *[!\ ]* ]];
      then
        isCsvFilePresent="True"
        echo $isCsvFilePresent
      fi

      if [ "${{ parameters.SeparateWorkerCsvFiles }}" == "True" ] && [ $isCsvFilePresent == "False" ];
      then
        echo "##vso[task.logissue type=error]Please either set SeparateWorkerCsvFiles to false if zero or no more than one csv if used."
        echo "##vso[task.logissue type=error]If SeparateWorkerCsvFiles set to 'checked', please supply a valid csv filename to JMeterCsvFile as set in your jmeter script."
        exit 1
      fi

      randomName=`openssl rand -hex 4` && namespace="jmeter-$randomName"
      echo $namespace && echo "##vso[task.setvariable variable=NAMESPACE]$namespace"

      # Authenticate with Container Registry
      export HELM_EXPERIMENTAL_OCI=1
      helm registry login performancetestingdevuks.azurecr.io \
        --username $(ContainerRegistryUser) --password $(ContainerRegistryPassword)

      # Download jmeter helm chart from azure container registry
      helm pull oci://performancetestingdevuks.azurecr.io/jmeter/jmeterhelm --version 1.0.0 --untar
    displayName: 'Fetch Helm chart & Assign Variables'

  # Deploy the changes to the namespace - wait untill all pods are running with default timeout set to 10 minutes.
  - task: HelmDeploy@0
    displayName: 'helm deploy'
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceConnection: ${{ parameters.KubernetesServiceEndpoint }}
      namespace: '$(NAMESPACE)'
      releaseName: 'perf-test'
      command: upgrade
      chartType: FilePath
      chartPath: jmeterhelm
      chartName: 'perf-test'
      arguments: >-
        --set workerReplicaCount=${{ parameters.JMeterWorkers }}
        --create-namespace
        --timeout 10m
        --wait
    enabled: true

  # Authenticate with Dev Cluster - used for running cli-based aks commands.
  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: ${{ parameters.KubernetesServiceEndpoint }}
      command: 'login'
    displayName: 'Authenticate Dev Cluster'
    enabled: true

  # Run JMeter Test
  - script: |
      set -e
      sleep 120 & touch customConfig.properties
      
      # Get all pods
      allPods=($(kubectl get --no-headers pods -n $(NAMESPACE) -o=custom-columns=NAME:.metadata.name))

      echo  -e "======================== Jmeter Values: ========================"
      if [[ "${{ parameters.Hostname }}" = *[!\ ]* ]];
      then
        echo Hostname: ${{ parameters.Hostname }} && echo Hostname=${{ parameters.Hostname }} >> customConfig.properties
      fi

      if [ "${{ parameters.NumberOfUsers }}" > "1" ];
      then
        divideUsers=`expr ${{ parameters.NumberOfUsers }} / ${{ parameters.JMeterWorkers }}`
        roundedUsers=`echo $divideUsers | awk '{print int($1+0.5)}'`
        echo Number Of Users Per Worker: $roundedUsers && echo NumberOfUsers=$roundedUsers >> customConfig.properties
      else
        echo Number Of Users: ${{ parameters.NumberOfUsers }} && echo NumberOfUsers=${{ parameters.NumberOfUsers }} >> customConfig.properties
      fi
      
      if [ ${{ parameters.RampUp }} ]
      then
        echo Ramp Up Seconds: ${{ parameters.RampUp }} && echo RampUp=${{ parameters.RampUp }} >> customConfig.properties
      fi
      
      if [ ${{ parameters.Duration }} ]
      then
        echo Test Duration Time: ${{ parameters.Duration }} && echo Duration=${{ parameters.Duration }} >> customConfig.properties 
      fi
      
      if [ ${{ parameters.StartUpDelayedTime }} ]
      then
       echo Delay Start Up Seconds: ${{ parameters.StartUpDelayedTime }} && echo StartUpDelayedTime=${{ parameters.StartUpDelayedTime }} >> customConfig.properties 
      fi

      echo "================================================================"

      # Copy different CSV files to each pods and rename them to match csv file name defined in JMX script
      if [ "${{ parameters.SeparateWorkerCsvFiles }}" == "True" ];
      then
        echo "Total amount of pods: ${#allPods[@]} (Includes pre-defined master pod)"
        trimWhiteSpaceFromCsv=`echo "   ${{ parameters.JMeterCsvFile }}   " | xargs`
        csvFileNameWithoutExtension=`echo "${trimWhiteSpaceFromCsv%.*}"`
        
        files=( `find ./PerformanceTests -type f -iname "$csvFileNameWithoutExtension*.csv"` )
        echo "Total amount of csv: ${#files[@]}"

        for fileIndex in "${!files[@]}"
        do
          filename="$(basename "${files[fileIndex]}")"
          
          if [ "$fileIndex" -lt "${#allPods[@]}" ];
          then
            echo "Copying $filename to pod ${allPods[fileIndex]}"
            kubectl cp PerformanceTests/$filename ${allPods[fileIndex]}:/${{ parameters.JMeterCsvFile }} -n $(NAMESPACE)
            kubectl cp customConfig.properties ${allPods[fileIndex]}:/customConfig.properties -n $(NAMESPACE)
          fi
        done
      fi

      # Copy all CSV files to each pods without renaming
      if [ "${{ parameters.SeparateWorkerCsvFiles }}" == "False" ];
      then
        files=( `find ./PerformanceTests -type f -iname "*.csv"` )
        for fileIndex in "${!files[@]}"
        do
          filename="$(basename "${files[fileIndex]}")"
          echo "Copying $filename to all pods"

          for pod in "${!allPods[@]}"
          do
            kubectl cp PerformanceTests/$filename ${allPods[pod]}:/$filename -n $(NAMESPACE)
            kubectl cp customConfig.properties ${allPods[pod]}:/customConfig.properties -n $(NAMESPACE)
          done
        done
      fi

      # Get main pod details
      master_pod=`kubectl get pods -n $(NAMESPACE) | grep jmeter-master | awk '{print $1}'`

      # Get the basic file name for JMX and custom JMX properties without file path
      test_name="$(basename "${{ parameters.JMeterJmxFile }}")"
      kubectl cp PerformanceTests/$test_name $master_pod:/$test_name -n $(NAMESPACE)

      echo "##[section]Starting JMeter Test!"
      kubectl exec -ti $master_pod --request-timeout=0 -n $(NAMESPACE) -- /bin/bash /load_test $test_name

      echo "##[section] Copying reports from $(NAMESPACE) namespace"
      kubectl cp $master_pod:/LoadReports '$(Build.SourcesDirectory)/LoadReports' -n $(NAMESPACE)
    displayName: 'RUN: Test Running'

  # Publish test result as HTML
  - task: publishhtmlreport@1
    inputs:
      htmlType: 'Jmeter'
      JmeterReportsPath: '$(Build.SourcesDirectory)/LoadReports'
    displayName: 'REPORT: Generate HTML'
    condition: always()
    enabled: true

  # Publish build artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.SourcesDirectory)/LoadReports'
      artifactName: 'drop' 
    condition: always()
    displayName: 'RESULTS: Publish Load Test Artifacts'
    enabled: true

  # Delete performance test namespace
  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: ${{ parameters.KubernetesServiceEndpoint }}
      command: 'delete'
      arguments: 'ns $(NAMESPACE)'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Azure Container Registry'
    condition: always()
    enabled: true
    displayName: 'DELETE: Namespace in the cluster'