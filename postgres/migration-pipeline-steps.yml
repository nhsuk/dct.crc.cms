steps:
  - checkout: self
  - task: AzureKeyVault@2
    displayName: Get old server admin password
    inputs:
      azureSubscription: ${{ parameters.singleServerVaultAzureSubscription }}
      KeyVaultName: ${{ parameters.singleServerVaultName }}
      SecretsFilter: saPassword
  - task: AzureKeyVault@2
    displayName: Get old server user password
    inputs:
      azureSubscription: ${{ parameters.singleServerVaultAzureSubscription }}
      KeyVaultName: ${{ parameters.appVaultName }}
      SecretsFilter: dbPass
  - task: AzureKeyVault@2
    displayName: Get new server secrets
    inputs:
      azureSubscription: dct-crccms-rg-${{ parameters.env }}
      KeyVaultName: dct-crccms-kv-${{ parameters.env }}-uks
      SecretsFilter: '*'
  - bash: |
      echo "##vso[task.logissue type=warning;]Running in dryrun mode"
      echo "##vso[task.complete result=SucceededWithIssues;]"
    displayName: Dry Run
    condition: ${{ eq(parameters.dryRun, true) }}
  - task: AzureCLI@2
    displayName: Run migration
    inputs:
      azureSubscription: dct-crccms-rg-${{ parameters.env }}
      scriptType: bash
      scriptLocation: scriptPath
      workingDirectory: postgres
      scriptPath: postgres/run-migration.sh
    env:
      ENVIRONMENT: ${{ parameters.env }}
      SUBSCRIPTION: ${{ parameters.subscriptionId }}
      MIGRATION_ID: $(Build.BuildId)
      ${{ if eq(parameters.dryRun, true) }}:
        MIGRATION_OPTION: Validate
      ${{ else }}:
        MIGRATION_OPTION: ValidateAndMigrate
      SINGLE_SERVER_ADMIN_PASSWORD: $(saPassword)
      FLEX_SERVER_ADMIN_PASSWORD: $(postgresqlAdminPassword)
      CRC_PASSWORD: $(dbPass)
  - task: ShellScript@2
    displayName: Run data validation
    inputs:
      scriptPath: postgres/run-validation.sh
      disableAutoCwd: true
      cwd: postgres
    env:
      ENVIRONMENT: ${{ parameters.env }}
      SINGLE_SERVER_ADMIN_PASSWORD: $(saPassword)
      FLEX_SERVER_ADMIN_PASSWORD: $(postgresqlAdminPassword)
