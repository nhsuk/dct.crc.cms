trigger:
  batch: true
  branches:
    include:
    - main
    exclude:
    - refs/tags/*
    - refs/heads/review/*

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: Dryrun
    type: boolean
    default: false


steps:
- checkout: self
  persistCredentials: true
  fetchDepth: 0

- task: AzureCLI@2
  displayName: Remove old namespaces
  inputs:
    azureSubscription: 'dct-nhsuk-platforms-rg-dev-uksouth-dct.campaign-resource-centre-v3'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |

      echo $(git branch -la)
      # fail script if any sub commands fail
      set -x

      # Support a dry-run mode
      if [[ "${{ parameters.Dryrun }}" == "True" ]]; then
        DRY_RUN="client"
        echo "##vso[task.logissue type=warning;]Running in dryrun mode"
      else
        DRY_RUN="none"
      fi

      # Authenticate with dev cluster to fetch all namespaces
      az aks get-credentials --admin --name nhsuk-platforms-aks-dev-uksouth --resource-group nhsuk-platforms-rg-dev-uksouth

      ALL_K8S_NAMESPACES=$(kubectl get ns --no-headers | grep "^dct-crc-v3-review-" | awk '{print $1}')

      # For each namespace, make sure the git branch still exists. If not, delete the namespace
      for namespace in $ALL_K8S_NAMESPACES; do
          # Remove the prefix and postfix from namespace to just get the review name
          BRANCH_NAME=$(echo $namespace | sed 's/dct-crc-v3-review-\(.*\)-ns$/\1/')

          git show-ref --verify --quiet "refs/remotes/origin/review/$BRANCH_NAME"
          if [[ $? -eq 0 ]]; then
              echo "Keeping namespace: $namespance"
          else
              echo "Deleting namespase: $namespace"
              echo $(kubectl delete --dry-run=$DRY_RUN namespace $namespace)
              echo "Deleted namespase: $namespace"
          fi
      done

      if [[ "${{ parameters.Dryrun }}" == "True" ]]; then
        echo "##vso[task.complete result=SucceededWithIssues;]"
      fi

- task: AzureCLI@2
  displayName: Remove old image tags
  inputs:
    azureSubscription: 'nhsuk-dockerregi'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |

      echo $(git branch -la)
      # fail script if any sub commands fail
      set -x
      
      # Support a dry-run mode
      if [[ "${{ parameters.Dryrun }}" == "True" ]]; then
        echo "##vso[task.logissue type=warning;]Running in dryrun mode"
      fi

      releaseTags=$(az acr repository show-tags -n nhsuk --repository dct/crc-v3 --orderby time_desc | jq -r '.[]' | grep "^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$" | awk '{print $1}')
      numberOfTagsToKeep=3

      index=0
      echo "Keeping $numberOfTagsToKeep most recent release tags, deleting the rest:"
      for tag in $releaseTags; do
        if (( $index < $numberOfTagsToKeep )); then
          index=$((index + 1))
          echo "Keeping release tag: $tag"
        else
          if [[ "${{ parameters.Dryrun }}" == "True" ]]; then
            echo "DRYRUN - Deleting release tag: $tag"
          else
            echo "Deleting release tag: $tag"
          fi
        fi
      done

      reviewTags=$(az acr repository show-tags -n nhsuk --repository dct/crc-v3 --orderby time_desc | jq -r '.[]' | grep "^review-" | awk '{print $1}')

      echo "Keeping review tags for existing branches, deleting the rest:"
      for tag in $reviewTags; do
          # Remove the 'review-' prefix to just get the review branch
          reviewBranch=${tag#"review-"}

          git show-ref --verify --quiet "refs/remotes/origin/review/$reviewBranch"
          if [[ $? -eq 0 ]]; then
              echo "Keeping review tag: $tag"
          else
            if [[ "${{ parameters.Dryrun }}" == "True" ]]; then
              echo "DRYRUN - Deleting review tag: $tag"
            else
              echo "Deleting review tag: $tag"
            fi
          fi
      done

      if [[ "${{ parameters.Dryrun }}" == "True" ]]; then
        echo "##vso[task.complete result=SucceededWithIssues;]"
      fi
