pool:
  vmImage: 'ubuntu-latest'

trigger:
  batch: true
  branches:
    include:
      - 'review/*'
      - 'refs/tags/*'
      - 'main'
    exclude:
      - 'refs/tags/tf-*'
  paths:
    exclude:
      - 'terraform'

schedules:
  - cron: '0 4 * * *'
    displayName: Daily build
    always: true
    branches:
      include:
        - main

parameters:
   # Dry run changes
  - name: dryRun
    displayName: Dry Run
    type: boolean
    default: false
  - name: deployReview
    displayName: Force Deploy Review
    type: boolean
    default: false
  - name: deployIntegration
    displayName: Force Deploy Integration
    type: boolean
    default: false
  - name: deployStaging
    displayName: Force Deploy Staging
    type: boolean
    default: false
  - name: deployProduction
    displayName: Force Deploy Production
    type: boolean
    default: false
  - name: deployDr
    displayName: Force Deploy DisasterRecovery
    type: boolean
    default: false
  # end dryrun
  - name: debug
    displayName: Debug (forced false in production)
    type: boolean
    default: false
  - name: tags
    displayName: Frontend test tags (default Smoke)
    type: string
    default: Smoke
  - name: paragonMock
    displayName: Mock Paragon API (forced false in production)
    type: boolean
    default: false
  - name: notifyDebug
    displayName: Mock Gov notification API (forced false in production)
    type: boolean
    default: true
  - name: workers
    displayName: Workers (web concurrency)
    type: number
    default: 5
  - name: gunicornArgs
    displayName: Gunicorn commands
    type: string
    default: -c gunicorn-conf.py --worker-class 'gthread' --max-requests 1200 --max-requests-jitter 50 --access-logfile - --timeout 600 --threads 5
  - name: azureSearchUpdate
    displayName: Update Azure search (forced true in staging and production)
    type: boolean
    default: false

resources:
  - repo: self

variables:
  sourceBranchName: '$(Build.SourceBranchName)'
  environmentName: 'production'
  namespace: 'dct-crc-v3'
  buildId: '$(Build.BuildId)'
  repository: 'dct/crc-v3'
  imageName: 'nhsuk.azurecr.io/dct/crc-v3'
  webReplicaCount: 2
  webMinReplicas: 2
  maxReplicas: 7
  averageUtilization: 90
  requestscpu: '600m'
  requestsmemory: '1400Mi'
  limitsmemory: '2Gi'
  limitscpu: '1000m'
  appPort: '8000'
  redisUrl: 'redis://crc-v3-redis-svc:6379/0'
  staticDir: '/app/static/'
  staticUrl: '/static/'

stages:
  - stage: Test
    displayName: Test
    jobs:
      - job: dryRun
        displayName: 'Dry Run'
        condition: eq('${{ parameters.dryRun }}', 'True')
        continueOnError: true
        steps:
          - bash: |
              echo "##vso[task.logissue type=error]Running in dryrun mode."
              echo "##vso[task.complete result=SucceededWithIssues;]"
            displayName: 'Dry Run: ${{ parameters.dryRun }}'
      - job: test
        displayName: 'Test'
        steps:
          - template: azure-pipeline-templates/test.yml
  - stage: Build
    displayName: Build
    dependsOn: Test
    condition: succeeded()
    jobs:
      - job: buildReview
        displayName: 'Build Review'
        condition: or(startsWith(variables['Build.SourceBranch'], 'refs/heads/review/'), ${{ parameters.deployReview }})
        variables:
          tag: 'review-$(sourceBranchName)'
        steps:
          - template: azure-pipeline-templates/build.yml
            parameters:
              tag: $(tag)
              dryRun: ${{ parameters.dryRun }}
      - job: buildIntegration
        displayName: 'Build Integration'
        condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ${{ parameters.deployIntegration }})
        variables:
          tag: 'latest'
        steps:
          - template: azure-pipeline-templates/build.yml
            parameters:
              tag: $(tag)
              dryRun: ${{ parameters.dryRun }}
      - job: buildStaging
        displayName: 'Build Staging'
        condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), ${{ parameters.deployStaging }})
        variables:
          tag: '$(sourceBranchName)'
        steps:
          - template: azure-pipeline-templates/build.yml
            parameters:
              tag: $(tag)
              dryRun: ${{ parameters.dryRun }}
  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: deployReview
        displayName: 'Deploy Review'
        condition: or(${{ parameters.deployReview }}, and(startsWith(variables['Build.SourceBranch'], 'refs/heads/review/'), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/review/perf-'))))
        variables:
          - group: Review
          - name: environmentName
            value: 'review'
          - name: namespace
            value: 'dct-crc-v3-review-$(sourceBranchName)-ns'
          - name: tag
            value: 'review-$(sourceBranchName)'
          - name: hostUrl
            value: 'crc-v3-review-$(sourceBranchName).nhswebsite-dev.nhs.uk'
          - name: appName
            value: 'crc-v3'
          - name: devEnv
            value: 'int'
          - name: appEnv
            value: 'review'
          - name: autoscaleEnv
            value: 'int'
          - name: paragonMock
            value: ${{ parameters.paragonMock }}
          - name: debug
            value: ${{ parameters.debug }}
          - name: notifyDebug
            value: ${{ parameters.notifyDebug }}
          - name: workers
            value: 2
          - name: gunicornArgs
            value: ${{ parameters.gunicornArgs }}
          - name: azureSearchUpdate
            value: ${{ parameters.azureSearchUpdate }}
          - name: tags
            value: ${{ parameters.tags }}
          - name: imageTag
            value: $(FRONTEND_TEST_CONTAINER_IMAGE_TAG)
        steps:
          - template: azure-pipeline-templates/deploy.yml
            parameters:
              dryRun: ${{ parameters.dryRun }}
              azureSubscription: 'dct-development-vault-uks-dct.campaign-resource-centre-v3'
              keyVaultName: 'dct-crc-v3-vlt-rev-uks'
              kubernetesServiceConnection: 'helm-dct-platforms-aks-dev-uksouth-dct.campaign-resource-centre-v3'
              kubernetesServiceEndPoint: 'helm-dct-platforms-aks-dev-uksouth-dct.campaign-resource-centre-v3'
          - ${{ if ne('${{ parameters.dryRun }}', 'True') }}:
            - template: azure-pipeline-templates/frontendtest.yml

      - job: deployTest
        displayName: 'Deploy Perf Testing'
        condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/review/perf-')
        variables:
          environmentName: 'staging'
          namespace: 'dct-crc-v3-test-ns'
          tag: 'review-$(sourceBranchName)'
          hostUrl: 'crc-v3.nhswebsite-staging.nhs.uk'
          appName: 'crc-v3-test'
          devEnv: 'stag'
          appEnv: 'staging'
          autoscaleEnv: 'stag'
          averageUtilization: 60
          paragonMock: ${{ parameters.paragonMock }}
          debug: ${{ parameters.debug }}
          notifyDebug: ${{ parameters.notifyDebug }}
          workers: ${{ parameters.workers }}
          gunicornArgs: ${{ parameters.gunicornArgs }}
          azureSearchUpdate: ${{ parameters.azureSearchUpdate }}
          redisUrl: 'redis://crc-v3-test-redis-svc:6379/0'
        steps:
          - template: azure-pipeline-templates/deploy.yml
            parameters:
              dryRun: ${{ parameters.dryRun }}
              azureSubscription: 'dct-staging-vault-uks-dct.campaign-resource-centre-v3'
              keyVaultName: 'dct-crc-v3-vlt-test-uks'
              kubernetesServiceConnection: 'helm-dct-platforms-aks-stag-uksouth-dct.campaign-resource-centre-v3'
              kubernetesServiceEndPoint: 'helm-dct-platforms-aks-stag-uksouth-dct.campaign-resource-centre-v3'
      - job: deployIntegration
        displayName: 'Deploy Integration'
        condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ${{ parameters.deployIntegration }})
        variables:
          - group: Integration
          - name: environmentName
            value: 'integration'
          - name: namespace
            value: 'dct-crc-v3-ns'
          - name: tag
            value: 'latest'
          - name: hostUrl
            value: 'crc-v3.nhswebsite-dev.nhs.uk'
          - name: hostUrlCertSecretName
            value: 'haproxy-tls-cert'
          - name: appName
            value: 'crc-v3'
          - name: devEnv
            value: 'int'
          - name: appEnv
            value: 'integration'
          - name: autoscaleEnv
            value: 'int'
          - name: paragonMock
            value: ${{ parameters.paragonMock }}
          - name: debug
            value: ${{ parameters.debug }}
          - name: notifyDebug
            value: ${{ parameters.notifyDebug }}
          - name: workers
            value: 2
          - name: gunicornArgs
            value: ${{ parameters.gunicornArgs }}
          - name: azureSearchUpdate
            value: ${{ parameters.azureSearchUpdate }}
          - name: tags
            value: ${{ parameters.tags }}
          - name: imageTag
            value: $(FRONTEND_TEST_CONTAINER_IMAGE_TAG)
        steps:
          - template: azure-pipeline-templates/deploy.yml
            parameters:
              dryRun: ${{ parameters.dryRun }}
              azureSubscription: 'dct-development-vault-uks-dct.campaign-resource-centre-v3'
              keyVaultName: 'dct-crc-v3-vlt-int-uks'
              kubernetesServiceConnection: 'helm-dct-platforms-aks-dev-uksouth-dct.campaign-resource-centre-v3'
              kubernetesServiceEndPoint: 'helm-dct-platforms-aks-dev-uksouth-dct.campaign-resource-centre-v3'
          - template: azure-pipeline-templates/frontendtest.yml
      - job: deployStaging
        displayName: 'Deploy Staging'
        condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), ${{ parameters.deployStaging }})
        variables:
          - group: Staging
          - name: environmentName
            value: 'staging'
          - name: namespace
            value: 'dct-crc-v3-ns'
          - name: tag
            value: '$(sourceBranchName)'
          - name: hostUrl
            value: 'staging.campaignresources.dhsc.gov.uk'
          - name: hostUrlCertSecretName
            value: 'stag.campaignresources-tls-cert'
          - name: appName
            value: 'crc-v3'
          - name: devEnv
            value: 'stag'
          - name: appEnv
            value: 'staging'
          - name: autoscaleEnv
            value: 'stag'
          - name: averageUtilization
            value: 60
          - name: paragonMock
            value: ${{ parameters.paragonMock }}
          - name: debug
            value: ${{ parameters.debug }}
          - name: notifyDebug
            value: false
          - name: workers
            value: ${{ parameters.workers }}
          - name: gunicornArgs
            value: ${{ parameters.gunicornArgs }}
          - name: azureSearchUpdate
            value: true
          - name: tags
            value: ${{ parameters.tags }}
          - name: imageTag
            value: $(FRONTEND_TEST_CONTAINER_IMAGE_TAG)
        steps:
          - template: azure-pipeline-templates/deploy.yml
            parameters:
              dryRun: ${{ parameters.dryRun }}
              azureSubscription: 'dct-staging-vault-uks-dct.campaign-resource-centre-v3'
              keyVaultName: 'dct-crc-v3-vlt-stag-uks'
              kubernetesServiceConnection: 'helm-dct-platforms-aks-stag-uksouth-dct.campaign-resource-centre-v3'
              kubernetesServiceEndPoint: 'helm-dct-platforms-aks-stag-uksouth-dct.campaign-resource-centre-v3'
          - template: azure-pipeline-templates/frontendtest.yml
            parameters:
              authorize: STAGING_AUTHORIZATION
  - stage: deployProduction
    displayName: 'Deploy Production'
    condition: or(and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/')), ${{ parameters.deployProduction }})
    dependsOn: Deploy
    jobs:
      - deployment: approval
        environment: production
      - job: deployProduction
        variables:
          - group: Production
          - name: environmentName
            value: 'production'
          - name: namespace
            value: 'dct-crc-v3-ns'
          - name: tag
            value: '$(sourceBranchName)'
          - name: hostUrl
            value: 'campaignresources.dhsc.gov.uk'
          - name: hostUrlCertSecretName
            value: 'campaigns-resources-prod-tls-cert'
          - name: appName
            value: 'crc-v3'
          - name: appEnv
            value: 'production'
          - name: devEnv
            value: 'prod'
          - name: autoscaleEnv
            value: 'prod'
          - name: webReplicaCount
            value: 2
          - name: webMinReplicas
            value: 2
          - name: averageUtilization
            value: 60
          - name: paragonMock
            value: false
          - name: debug
            value: false
          - name: notifyDebug
            value: false
          - name: workers
            value: ${{ parameters.workers }}
          - name: gunicornArgs
            value: ${{ parameters.gunicornArgs }}
          - name: azureSearchUpdate
            value: true
          - name: tags
            value: ${{ parameters.tags }}
          - name: imageTag
            value: $(FRONTEND_TEST_CONTAINER_IMAGE_TAG)
        steps:
          - template: azure-pipeline-templates/deploy.yml
            parameters:
              dryRun: ${{ parameters.dryRun }}
              azureSubscription: 'dct-production-vault-uks-dct.campaign-resource-centre-v3'
              keyVaultName: 'dct-crc-v3-vlt-prod-uks'
              kubernetesServiceConnection: 'helm-dct-platforms-aks-prod-uksouth-dct.campaign-resource-centre-v3'
              kubernetesServiceEndPoint: 'helm-dct-platforms-aks-prod-uksouth-dct.campaign-resource-centre-v3'
          - template: azure-pipeline-templates/frontendtest.yml
  - stage: deployDr
    displayName: 'Deploy DR'
    condition: or(and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/')), ${{ parameters.deployDr }})
    dependsOn: Deploy
    jobs:
      - deployment: approval
        environment: production
      - job: deployDr
        variables:
          environmentName: 'production'
          namespace: 'dct-crc-v3-ns'
          tag: '$(sourceBranchName)'
          hostUrl: 'campaignresources.dhsc.gov.uk'
          hostUrlCertSecretName: 'campaigns-resources-prod-tls-cert'
          drHostUrl: 'dr.nhswebsite.nhs.uk'
          appName: 'crc-v3'
          appEnv: 'production'
          devEnv: 'prod'
          autoscaleEnv: 'prod'
          webReplicaCount: 2
          webMinReplicas: 2
          averageUtilization: 60
          paragonMock: false
          debug: false
          notifyDebug: false
          workers: ${{ parameters.workers }}
          gunicornArgs: ${{ parameters.gunicornArgs }}
          azureSearchUpdate: true
        steps:
          - template: azure-pipeline-templates/deploy.yml
            parameters:
              dryRun: ${{ parameters.dryRun }}
              azureSubscription: 'dct-dr-vault-ukw-dct.campaign-resource-centre-v3'
              keyVaultName: 'dct-crc-v3-vlt-dr-ukw'
              kubernetesServiceConnection: 'helm-dct-platforms-aks-prod-ukwest-dct.campaign-resource-centre-v3'
              kubernetesServiceEndPoint: 'helm-dct-platforms-aks-prod-ukwest-dct.campaign-resource-centre-v3'
