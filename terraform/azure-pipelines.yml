name: $(BuildId)

trigger:
  batch: true
  branches:
    include:
    - review/*
    - refs/tags/tf-*
    - main
  paths:
    include:
    - terraform

pr:
  branches:
    include:
    - '*'
  paths:
    include:
      - terraform

pool:
  vmImage: ubuntu-latest

parameters:
  - name: dryrun
    displayName: Dry Run
    type: boolean
    default: false
  - name: deployReview
    displayName: Force Deploy Review
    type: boolean
    default: false
  - name: deployIntegration
    displayName: Force Deploy Integration
    type: boolean
    default: false
  - name: deployStaging
    displayName: Force Deploy Staging
    type: boolean
    default: false
  - name: deployProduction
    displayName: Force Deploy Production
    type: boolean
    default: false
  - name: deployDr
    displayName: Force Deploy Disaster Recovery
    type: boolean
    default: false

variables:
  - name: ARTIFACT_NAME
    value: drop
  - template: templates/release-variables.yml
    parameters:
      environment: dev

resources:
  repositories:
    - repository: network-spoke
      type: github
      name: nhsuk/nhsuk.platform.terraform-modules.network-spoke
      endpoint: nhsuk (1)
    - repository: container-app-env
      type: github
      name: nhsuk/dct.terraform-modules.container-app-env
      endpoint: nhsuk (1)
    - repository: wagtail-container-apps
      type: github
      name: nhsuk/dct.terraform-modules.wagtail-container-apps
      endpoint: nhsuk (1)

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:
          - checkout: self
            workspaceRepo: true
            fetchDepth: 1

          - checkout: network-spoke
            persistCredentials: true
            fetchDepth: 1

          - checkout: container-app-env
            persistCredentials: true
            fetchDepth: 1

          - checkout: wagtail-container-apps
            persistCredentials: true
            fetchDepth: 1

          - script: |
              tail -n 2 $(Pipeline.Workspace)/s/nhsuk.platform.terraform-modules.network-spoke/.git/config >> ~/.gitconfig
              tail -n 2 $(Pipeline.Workspace)/s/dct.terraform-modules.container-app-env/.git/config >> ~/.gitconfig
              tail -n 2 $(Pipeline.Workspace)/s/dct.terraform-modules.wagtail-container-apps/.git/config >> ~/.gitconfig
            displayName: Git auth

          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@2
            displayName: Install latest Terraform

          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@2
            displayName: Lint
            inputs:
              command: fmt
              workingDirectory: terraform/src/common

          - task: trivy@1
            displayName: Trivy scan
            inputs:
              path: terraform/src/common
              severities: HIGH,CRITICAL,MEDIUM
              options: --skip-check-update --scanners vuln,misconfig,secret --tf-vars terraform/src/common/env/dev.tfvars

          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@2
            displayName: Initialise
            inputs:
              command: init
              workingDirectory: terraform/src/common
              backendType: azurerm
              backendServiceArm: ${{ variables.AZURE_SUBSCRIPTION }}
              backendAzureRmResourceGroupName: ${{ variables.TF_RESOURCE_GROUP }}
              backendAzureRmStorageAccountName: ${{ variables.TF_STORAGE_ACCOUNT }}

          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@2
            displayName: Validate
            inputs:
              command: validate
              workingDirectory: terraform/src/common

      - job: Publish # Publish to artifacts for deployment stages
        steps:
          - task: CopyFiles@2
            displayName: Copy to artifacts
            inputs:
              SourceFolder: terraform/src/common
              TargetFolder: $(Build.ArtifactStagingDirectory)
              CleanTargetFolder: true
              OverWrite: true

          - task: PublishBuildArtifacts@1
            displayName: Publish artifacts
            inputs:
              ArtifactName: terraform

  - stage: Review
    dependsOn: Build
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/heads/review/'), ${{ parameters.deployReview }})
    variables:
      - template: templates/release-variables.yml
        parameters:
          environment: dev
    jobs:
      - deployment: Review
        environment: Review
        strategy:
          runOnce:
            deploy:
              steps:
              - template: templates/deployment-steps.yml
                parameters:
                  environment: dev
                  azureSubscription: ${{ variables.AZURE_SUBSCRIPTION }}
                  tfResourceGroup: ${{ variables.TF_RESOURCE_GROUP }}
                  tfStorageAccount: ${{ variables.TF_STORAGE_ACCOUNT }}
                  dryrun: ${{ parameters.dryrun }}

  - stage: Integration
    dependsOn: Build
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ${{ parameters.deployIntegration }})
    variables:
      - template: ./templates/release-variables.yml
        parameters:
          environment: int
    jobs:
      - deployment: Integration
        environment: Integration
        strategy:
          runOnce:
            deploy:
              steps:
              - template: templates/deployment-steps.yml
                parameters:
                  environment: int
                  azureSubscription: ${{ variables.AZURE_SUBSCRIPTION }}
                  tfResourceGroup: ${{ variables.TF_RESOURCE_GROUP }}
                  tfStorageAccount: ${{ variables.TF_STORAGE_ACCOUNT }}
                  dryrun: ${{ parameters.dryrun }}

  - stage: Staging
    dependsOn: Build
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/tf-'), ${{ parameters.deployStaging }})
    variables:
      - template: ./templates/release-variables.yml
        parameters:
          environment: stag
    jobs:
      - deployment: Staging
        environment: Staging
        strategy:
          runOnce:
            deploy:
              steps:
              - template: templates/deployment-steps.yml
                parameters:
                  environment: stag
                  azureSubscription: ${{ variables.AZURE_SUBSCRIPTION }}
                  tfResourceGroup: ${{ variables.TF_RESOURCE_GROUP }}
                  tfStorageAccount: ${{ variables.TF_STORAGE_ACCOUNT }}
                  dryrun: ${{ parameters.dryrun }}

  - stage: Production
    dependsOn: Staging
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/tf-'), ${{ parameters.deployProduction }})
    variables:
      - template: templates/release-variables.yml
        parameters:
          environment: prod
    jobs:
      - deployment: Approval
        environment: Production
      - deployment: Production
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
              - template: templates/deployment-steps.yml
                parameters:
                  environment: prod
                  azureSubscription: ${{ variables.AZURE_SUBSCRIPTION }}
                  tfResourceGroup: ${{ variables.TF_RESOURCE_GROUP }}
                  tfStorageAccount: ${{ variables.TF_STORAGE_ACCOUNT }}
                  dryrun: ${{ parameters.dryrun }}

  - stage: DR
    dependsOn: Production
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/tf-'), ${{ parameters.deployDr }})
    variables:
      - template: templates/release-variables.yml
        parameters:
          environment: prod
          location: ukw
    jobs:
      - deployment: Approval
        environment: Production
      - deployment: Production
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
              - template: ./templates/deployment-steps.yml
                parameters:
                  environment: prod
                  azureSubscription: ${{ variables.AZURE_SUBSCRIPTION }}
                  tfResourceGroup: ${{ variables.TF_RESOURCE_GROUP }}
                  tfStorageAccount: ${{ variables.TF_STORAGE_ACCOUNT }}
                  dryrun: ${{ parameters.dryrun }}
                  location: ukw
