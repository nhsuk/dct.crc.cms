parameters:
  artifactPath:           '' # working directory
  environment:            '' # env name for resource tags
  azureSubscription:      '' # the service connection in the pipeline
  resourceGroup:          '' # name of the resource group which contains the TF resources
  tfStorageAccount:       '' # name of the storage account which stores the TF state

steps:

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Install latest Terraform'
    inputs:
      terraformVersion: latest

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform init'
    inputs:
      command: init
      workingDirectory: ${{ parameters.artifactPath }}
      backendType: azurerm
      backendServiceArm: ${{ parameters.azureSubscription }}
      backendAzureRmResourceGroupName: ${{ parameters.resourceGroup }}
      backendAzureRmStorageAccountName: ${{ parameters.tfStorageAccount }}
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: terraform.tfstate

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform validate'
    inputs:
      workingDirectory: ${{ parameters.artifactPath }}

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform plan'
    inputs:
      command: plan
      workingDirectory: ${{ parameters.artifactPath }}
      environmentServiceName: ${{ parameters.azureSubscription }}
      commandOptions: >
        -var resource_group=${{ parameters.resourceGroup }}
        -var environment=${{ parameters.environment }}
        -var tfstate_account_name=${{ parameters.tfStorageAccount }}

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform apply'
    inputs:
      command: apply
      workingDirectory: ${{ parameters.artifactPath }}
      environmentServiceName: ${{ parameters.azureSubscription }}
      commandOptions: >
        -var resource_group=${{ parameters.resourceGroup }}
        -var environment=${{ parameters.environment }}
        -var tfstate_account_name=${{ parameters.tfStorageAccount }}

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      KeyVaultName: ${{ replace(parameters.resourceGroup, '-rg-', '-kv-') }}
      SecretsFilter: '*'

  - bash: |
      secretsToVerify=("alertingWebhook" "pubToken" "pubEndpoint" "searchIndexEndpoint")
      echo "Checking for secret values being set in ${{ replace(parameters.resourceGroup, '-rg-', '-kv-') }}"
      for i in ${!secretsToVerify[@]}
      do
        secretName=${secretsToVerify[$i]}
        if [[ ${!secretName} == '' ]];
        then
          echo "##vso[task.logissue type=warning;]$secretName has no value"
          echo "##vso[task.complete result=SucceededWithIssues;]"
          echo "WARNING: $secretName has no value"
        else
          echo "SUCCESS: $secretName has a value"
        fi
      done
    displayName: 'Verify secrets in ${{ replace(parameters.resourceGroup, '-rg-', '-kv-') }}'
