parameters:
  - name: artifactPath # working directory
    type: string
    default: ''
  - name: environment # env name for resource tags
    type: string
    default: ''
  - name: azureSubscription # the service connection in the pipeline
    type: string
    default: ''
  - name: resourceGroup # name of the resource group which contains the TF resources
    type: string
    default: ''
  - name: tfStorageAccount # name of the storage account which stores the TF state
    type: string
    default: ''
  - name: importArgs # comma separated list of resources to import in 'azurerm_instance.tf_name | <instance id>, ...' form
    type: string
    default: ' '
  - name: dryrun # skip apply stage
    type: boolean
    default: false
  - name: postgresqlServer # name of the PostgreSQL server
    type: string
    default: ''
  - name: postgresqlResourceGroup # name of the PostgreSQL database
    type: string
    default: ''

steps:

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Install latest Terraform'
    inputs:
      terraformVersion: latest

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform init'
    inputs:
      command: init
      workingDirectory: ${{ parameters.artifactPath }}
      backendType: azurerm
      backendServiceArm: ${{ parameters.azureSubscription }}
      backendAzureRmResourceGroupName: ${{ parameters.resourceGroup }}
      backendAzureRmStorageAccountName: ${{ parameters.tfStorageAccount }}
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: terraform.tfstate

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform validate'
    inputs:
      workingDirectory: ${{ parameters.artifactPath }}


  - ${{ if and(ne(parameters.importArgs, ''), ne(parameters.importArgs, ' ')) }}:
    - ${{ each resourceDetails in split(replace(parameters.importArgs, ' ', ''), ',')}}:
      - task: Bash@3
        displayName: 'Check import inputs'
        inputs:
          targetType: 'inlineScript'
          script: |
            echo "importArgs: ${{ parameters.importArgs }}"
            echo "resourceDetails: ${{ resourceDetails }}"
            echo "resourceAddress: ${{ split(resourceDetails, '|')[0] }}"
            echo "resourceId: ${{ split(resourceDetails, '|')[1] }}"

  - ${{ if and(ne(parameters.importArgs, ''), ne(parameters.importArgs, ' ')) }}:
    - ${{ each resourceDetails in split(replace(parameters.importArgs, ' ', ''), ',')}}:
      - task: TerraformCLI@0
        displayName: "terraform import state for ${{ split(resourceDetails, '|')[0] }}"
        inputs:
          command: import
          workingDirectory: ${{ parameters.artifactPath }}
          environmentServiceName: ${{ parameters.azureSubscription }}
          resourceAddress: ${{ split(resourceDetails, '|')[0] }}
          resourceId: ${{ split(resourceDetails, '|')[1] }}
          commandOptions: >
            -var resource_group=${{ parameters.resourceGroup }}
            -var environment=${{ parameters.environment }}
            -var tfstate_account_name=${{ parameters.tfStorageAccount }}
            -var postgresql_server=${{ parameters.postgresqlServer }}
            -var postgresql_resource_group=${{ parameters.postgresqlResourceGroup }}

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform plan'
    inputs:
      command: plan
      workingDirectory: ${{ parameters.artifactPath }}
      environmentServiceName: ${{ parameters.azureSubscription }}
      publishPlanResults: "deployment_plan"
      commandOptions: >
        -var resource_group=${{ parameters.resourceGroup }}
        -var environment=${{ parameters.environment }}
        -var tfstate_account_name=${{ parameters.tfStorageAccount }}
        -var postgresql_server=${{ parameters.postgresqlServer }}
        -var postgresql_resource_group=${{ parameters.postgresqlResourceGroup }}
        -out=$(System.DefaultWorkingDirectory)/terraform.tfplan
        -detailed-exitcode

  - ${{ if eq(parameters.dryrun, 'true') }}:
    - bash: |
        echo "##vso[task.logissue type=warning;]Running in dryrun mode - skipping apply step"
        echo "##vso[task.complete result=SucceededWithIssues;]"
      displayName: 'Dry Run - skipping apply'

  - ${{ if ne(parameters.dryrun, 'true') }}:
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
      inputs:
        command: apply
        workingDirectory: ${{ parameters.artifactPath }}
        environmentServiceName: ${{ parameters.azureSubscription }}
        commandOptions: $(System.DefaultWorkingDirectory)/terraform.tfplan

  - task: AzureCLI@2
    displayName: Azure CLI check secrets
    condition: succeededOrFailed()
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        secretIds=$(az keyvault secret list --vault-name ${{ replace(parameters.resourceGroup, '-rg-', '-kv-') }} --query [].id)
        secretIds=$(echo $secretIds | jq -c '.[]' | awk '{gsub(/"/,"")}1')
        emptySecrets=""

        for secretId in ${secretIds[@]};
        do  
          secretName=$(echo $secretId | awk -F'/' '{print $NF}')
          secretValue=$(az keyvault secret show --id $secretId --query value)
          secretValue=$(echo $secretValue | awk '{gsub(/"/,"")}1')
          if [[ $secretValue == '' ]];
          then
            echo "WARNING: $secretName has no value"
            emptySecrets="${emptySecrets} ${secretName}"
          else
            echo "SUCCESS: $secretName has a value"
          fi
        done
        
        if [[ $emptySecrets != '' ]];
        then
          echo "##vso[task.logissue type=warning;]Empty secrets found in ${{ replace(parameters.resourceGroup, '-rg-', '-kv-') }}: [$emptySecrets ]"
          echo "##vso[task.complete result=SucceededWithIssues;]"
        fi