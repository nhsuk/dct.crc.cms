#   build:
#     # permissions:
#     #   actions: read
#     #   contents: read
#     #   id-token: write

  
  #   # Builds and pushes an image up to your Azure Container Registry
  #   - name: Build and push image to ACR
  #     run: |
  #       echo $GITHUB_HEAD_REF
    #     az acr build \
    #     --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:review-${{ github.sha }} \
    #     --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
    #     -g ${{ env.RESOURCE_GROUP }} .

# #     # # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
# #     # - name: Get K8s context
# #     #   uses: azure/aks-set-context@v2.0
# #     #   with:
# #     #     resource-group: ${{ env.RESOURCE_GROUP }}
# #     #     cluster-name: ${{ env.CLUSTER_NAME }}

# #     # # Retrieves the credentials for pulling images from your Azure Container Registry
# #     # - name: Get ACR credentials
# #     #   run: |
# #     #     az acr update -n ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} --admin-enabled true
# #     #     ACR_USERNAME=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query username -o tsv)
# #     #     ACR_PASSWORD=$(az acr credential show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value -o tsv)
# #     #     echo "::set-output name=username::${ACR_USERNAME}"
# #     #     echo "::set-output name=password::${ACR_PASSWORD}"
# #     #   id: get-acr-creds

# #     # # Creates a kubernetes secret on your Azure Kubernetes Service cluster that matches up to the credentials from the last step
# #     # - name: Create K8s secret for pulling image from ACR
# #     #   uses: Azure/k8s-create-secret@v1.1
# #     #   with:
# #     #     container-registry-url: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
# #     #     container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
# #     #     container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
# #     #     secret-name: ${{ env.IMAGE_PULL_SECRET_NAME }}

# #     # # Runs Helm to create manifest files
# #     # - name: Bake deployment
# #     #   uses: azure/k8s-bake@v2.1
# #     #   with:
# #     #     renderEngine: 'helm'
# #     #     helmChart: ${{ env.CHART_PATH }}
# #     #     overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
# #     #     overrides: |     
# #     #       replicas:2
# #     #     helm-version: 'latest' 
# #     #   id: bake

# #     # # Deploys application based on manifest files from previous step
# #     # - name: Deploy application
# #       uses: Azure/k8s-deploy@v3.0
# #       with:
# #         action: deploy
# #         manifests: ${{ steps.bake.outputs.manifestsBundle }}
# #         images: |
# #           ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
# #         imagepullsecrets: |
# #           ${{ env.IMAGE_PULL_SECRET_NAME }}

# #       # - name: Build the Docker image
# #       #   # One for dev branch, int - latest, stag & prod - tags
# #       #   run: docker build . --file Dockerfile --tag review-${GITHUB_REF##*/}
# #       #   env:
# #       #     dockerTag: review-$(dockerTag)