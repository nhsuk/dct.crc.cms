name: Node Continuous Integration

on:
  push:
    branches:
      - 'main'
      - 'review/*'
      - 'refs/tags/*'

permissions:
  id-token: write
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: 'Extract branch name'
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/})"
      shell: bash
      id: extract_branch

    - name: 'Install Azure cli'
      run: |
        sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
        curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
        AZ_REPO=$(lsb_release -cs)
        echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
        sudo apt-get update
        sudo apt-get install azure-cli

    - name: 'Az CLI login'
      run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    - name: 'Build and push image to ACR'
      run: |
        echo $GITHUB_HEAD_REF
        az acr build \
        --image ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ secrets.CONTAINER_NAME }}:review-${{ github.sha }} \
        --registry ${{ secrets.AZURE_CONTAINER_REGISTRY }} \
        -g ${{ secrets.RESOURCE_GROUP }} .

    - name: 'Get K8s context'
      uses: azure/aks-set-context@v2.0
      with:
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.CLUSTER_NAME }}

    - name: 'Get ACR credentials'
      run: |
        az acr update -n ${{ secrets.AZURE_CONTAINER_REGISTRY }} -g ${{ secrets.RESOURCE_GROUP }} --admin-enabled true
        ACR_USERNAME=$(az acr credential show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.AZURE_CONTAINER_REGISTRY }} --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.AZURE_CONTAINER_REGISTRY }} --query passwords[0].value -o tsv)
        echo "::set-output name=username::${ACR_USERNAME}"
        echo "::set-output name=password::${ACR_PASSWORD}"
      id: get-acr-creds

    # Creates a kubernetes secret on your Azure Kubernetes Service cluster that matches up to the credentials from the last step
    - name: 'Create K8s secret for pulling image from ACR'
      uses: Azure/k8s-create-secret@v1.1
      with:
        container-registry-url: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
        container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
        secret-name: 'testing-image'

    # Runs Helm to create manifest files
    - name: 'Bake helm deployment'
      uses: azure/k8s-bake@v2.1
      with:
        renderEngine: 'helm'
        helmChart: 'helm'
        overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
        overrides: |     
          replicas:2
        helm-version: 'latest' 
      id: bake

    # Deploys application based on manifest files from previous step
    - name: Deploy application
      uses: Azure/k8s-deploy@v3.0
      with:
        action: deploy
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.IMAGE_PULL_SECRET_NAME }}