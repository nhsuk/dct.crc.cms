schedules:
- cron: "0 12 * * 0"
  displayName: Weekly SonarQube build
  branches:
    include:
    - 'review/*'
    - 'main'
  always: true

pool:
  vmImage: ubuntu-latest

jobs:
  - job: SonarQube_analysis
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'nhsuk acr-dct.campaign-resource-centre-v3'
        command: 'login'
    # Run CMS Test Coverage using pytest
    - script: |
        docker-compose -f ./docker-compose-test-coverage.yml up --build --force-recreate
      displayName: 'Run Coverage Test'
      enabled: true
    # Publish the test coverage report
    #- task: PublishCodeCoverageResults@1
    #  inputs:
    #    codeCoverageTool: Cobertura
    #    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/**/coverage.xml'
    #    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
    #  displayName: 'Publish Test Report'
    #  enabled: true
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'DCT_Campaigns_Resource_Centre'
        cliProjectName: 'DCT_Campaigns_Resource_Centre'
        cliSources: '.'
        extraProperties: |
          sonar.exclusions = campaignresourcecentre/**/migrations/*, campaignresourcecentre/dependency-scan-results/*, campaignresourcecentre/utils/tests/test_models.py, campaignresourcecentre/paragon/tests.py, campaignresourcecentre/notifications/adapters.py, FrontEndTests/**/*.py
          sonar.python.coverage.reportPaths = /home/vsts/work/1/s/docker/coverage.xml
    - task: SonarQubeAnalyze@5

  - job: run_hosted_OWASP_Dependency_Check
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download OWASP artifact
      inputs:
        buildType: "specific"
        project: "nhsuk.utilities"
        definition: "[schedule]-owasp-dependency-check-update"
        buildVersionToDownload: "latestFromBranch"
        branchName: refs/heads/main
        artifactName: "owasp"
        targetPath: "$(Pipeline.Workspace)/owasp"
        allowPartiallySucceededBuilds: true
    - task: Bash@3
      displayName: Run OWASP Dependency Check
      condition: and(succeeded(),eq(variables['DisableOwaspDependencyCheck'],false))
      inputs:
        workingDirectory: $(Pipeline.Workspace)/owasp
        filePath: $(Pipeline.Workspace)/owasp/run_owasp_scanner.sh
        arguments: '--scan "$(System.DefaultWorkingDirectory)" --failOnCVSS "$(OWASP.Fail.Score)" --project "$(Build.Repository.Name)" --out "$(System.DefaultWorkingDirectory)/dependency-scan-results" --format HTML --format JUNIT --format JSON'
    - task: PublishTestResults@2
      displayName: "Publish OWASP dependency check results"
      condition: and(succeededOrFailed(),eq(variables['DisableOwaspDependencyCheck'],false))
      inputs:
        testRunner: JUnit
        testResultsFiles: $(System.DefaultWorkingDirectory)/dependency-scan-results/dependency-check-junit.xml"
        testRunTitle: "OWASP Dependency check"

  - job: SonarQube_review
    dependsOn: SonarQube_analysis
    condition: eq(variables['Build.Reason'], 'PullRequest')
    steps: 

      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'dct-development-vault-uks-dct.campaign-resource-centre-v3'
          KeyVaultName: 'dct-crc-v3-vlt-int-uks'
          SecretsFilter: '*'
          RunAsPreJob: false

      - bash: |
          git clone https://github.com/Ross-Clark/SQPR.git

          pip install PyGithub==1.57
          pip install git+https://github.com/Ross-Clark/python-sonarqube-api.git@tags/2.0.0
          python3 SQPR/src/sqpr.py -g $(githubToken) -k DCT_Campaigns_Resource_Centre -p $(System.PullRequest.PullRequestNumber) -r nhsuk/dct-campaign-resource-centre -s $(sonarqubeToken) -u https://sonarqube.nhswebsite-staging.nhs.uk

        displayName: 'Post PR Review'
